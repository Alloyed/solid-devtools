// ../../configs/vitest.config.ts
import path from "path";
import solid from "file:///C:/Users/gthet/Repositories/solid-devtools/node_modules/.pnpm/vite-plugin-solid@2.7.0_solid-js@1.7.3_vite@4.2.1/node_modules/vite-plugin-solid/dist/esm/index.mjs";
import { defineConfig } from "file:///C:/Users/gthet/Repositories/solid-devtools/node_modules/.pnpm/vitest@0.30.0_jsdom@21.1.1/node_modules/vitest/dist/config.js";
var cwd = process.cwd();
var testConfig = {
  passWithNoTests: true,
  watch: false,
  globals: true,
  clearMocks: true,
  environment: "jsdom",
  transformMode: {
    web: [/\.[jt]sx?$/]
  }
};
var resolveConfig = {
  conditions: ["browser", "development"],
  alias: {
    "solid-js/web": path.resolve(cwd, "node_modules/solid-js/web/dist/dev.js"),
    "solid-js/store": path.resolve(cwd, "node_modules/solid-js/store/dist/dev.js"),
    "solid-js": path.resolve(cwd, "node_modules/solid-js/dist/dev.js")
  }
};
var vitestFullConfig = (patch) => defineConfig(() => {
  const config = {
    plugins: [solid()],
    test: testConfig,
    resolve: resolveConfig
  };
  patch == null ? void 0 : patch(config);
  return config;
});

// vite.config.ts
var vite_config_default = vitestFullConfig((c) => {
  c.test.setupFiles = "./src/setup.ts";
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vY29uZmlncy92aXRlc3QuY29uZmlnLnRzIiwgInZpdGUuY29uZmlnLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiQzpcXFxcVXNlcnNcXFxcZ3RoZXRcXFxcUmVwb3NpdG9yaWVzXFxcXHNvbGlkLWRldnRvb2xzXFxcXGNvbmZpZ3NcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXGd0aGV0XFxcXFJlcG9zaXRvcmllc1xcXFxzb2xpZC1kZXZ0b29sc1xcXFxjb25maWdzXFxcXHZpdGVzdC5jb25maWcudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0M6L1VzZXJzL2d0aGV0L1JlcG9zaXRvcmllcy9zb2xpZC1kZXZ0b29scy9jb25maWdzL3ZpdGVzdC5jb25maWcudHNcIjtpbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IHNvbGlkIGZyb20gJ3ZpdGUtcGx1Z2luLXNvbGlkJ1xuaW1wb3J0IHsgSW5saW5lQ29uZmlnIH0gZnJvbSAndml0ZXN0J1xuaW1wb3J0IHsgZGVmaW5lQ29uZmlnLCBVc2VyQ29uZmlnIH0gZnJvbSAndml0ZXN0L2NvbmZpZydcblxuY29uc3QgY3dkID0gcHJvY2Vzcy5jd2QoKVxuXG5leHBvcnQgY29uc3QgdGVzdENvbmZpZzogSW5saW5lQ29uZmlnID0ge1xuICBwYXNzV2l0aE5vVGVzdHM6IHRydWUsXG4gIHdhdGNoOiBmYWxzZSxcbiAgZ2xvYmFsczogdHJ1ZSxcbiAgY2xlYXJNb2NrczogdHJ1ZSxcbiAgZW52aXJvbm1lbnQ6ICdqc2RvbScsXG4gIHRyYW5zZm9ybU1vZGU6IHtcbiAgICB3ZWI6IFsvXFwuW2p0XXN4PyQvXSxcbiAgfSxcbn1cblxuZXhwb3J0IGNvbnN0IHJlc29sdmVDb25maWc6IFVzZXJDb25maWdbJ3Jlc29sdmUnXSA9IHtcbiAgY29uZGl0aW9uczogWydicm93c2VyJywgJ2RldmVsb3BtZW50J10sXG4gIGFsaWFzOiB7XG4gICAgJ3NvbGlkLWpzL3dlYic6IHBhdGgucmVzb2x2ZShjd2QsICdub2RlX21vZHVsZXMvc29saWQtanMvd2ViL2Rpc3QvZGV2LmpzJyksXG4gICAgJ3NvbGlkLWpzL3N0b3JlJzogcGF0aC5yZXNvbHZlKGN3ZCwgJ25vZGVfbW9kdWxlcy9zb2xpZC1qcy9zdG9yZS9kaXN0L2Rldi5qcycpLFxuICAgICdzb2xpZC1qcyc6IHBhdGgucmVzb2x2ZShjd2QsICdub2RlX21vZHVsZXMvc29saWQtanMvZGlzdC9kZXYuanMnKSxcbiAgfSxcbn1cblxuZXhwb3J0IGNvbnN0IHZpdGVzdEZ1bGxDb25maWcgPSAocGF0Y2g/OiAoY29uZmlnOiBVc2VyQ29uZmlnKSA9PiB2b2lkKSA9PlxuICBkZWZpbmVDb25maWcoKCkgPT4ge1xuICAgIGNvbnN0IGNvbmZpZzogVXNlckNvbmZpZyA9IHtcbiAgICAgIHBsdWdpbnM6IFtzb2xpZCgpXSxcbiAgICAgIHRlc3Q6IHRlc3RDb25maWcsXG4gICAgICByZXNvbHZlOiByZXNvbHZlQ29uZmlnLFxuICAgIH1cbiAgICBwYXRjaD8uKGNvbmZpZylcbiAgICByZXR1cm4gY29uZmlnXG4gIH0pXG4iLCAiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXGd0aGV0XFxcXFJlcG9zaXRvcmllc1xcXFxzb2xpZC1kZXZ0b29sc1xcXFxwYWNrYWdlc1xcXFxkZWJ1Z2dlclwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiQzpcXFxcVXNlcnNcXFxcZ3RoZXRcXFxcUmVwb3NpdG9yaWVzXFxcXHNvbGlkLWRldnRvb2xzXFxcXHBhY2thZ2VzXFxcXGRlYnVnZ2VyXFxcXHZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi9Vc2Vycy9ndGhldC9SZXBvc2l0b3JpZXMvc29saWQtZGV2dG9vbHMvcGFja2FnZXMvZGVidWdnZXIvdml0ZS5jb25maWcudHNcIjtpbXBvcnQgeyB2aXRlc3RGdWxsQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlncy92aXRlc3QuY29uZmlnJ1xuXG5leHBvcnQgZGVmYXVsdCB2aXRlc3RGdWxsQ29uZmlnKGMgPT4ge1xuICAvLyBzZXR1cCBuZWVkcyB0byBydW4gYmVmb3JlIHRoZSB0ZXN0cyB0byBhZGQgc29saWQtanMgYXBpIHRvIHRoZSBnbG9iYWwgc2NvcGVcbiAgYy50ZXN0IS5zZXR1cEZpbGVzID0gJy4vc3JjL3NldHVwLnRzJ1xufSlcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBd1YsT0FBTyxVQUFVO0FBQ3pXLE9BQU8sV0FBVztBQUVsQixTQUFTLG9CQUFnQztBQUV6QyxJQUFNLE1BQU0sUUFBUSxJQUFJO0FBRWpCLElBQU0sYUFBMkI7QUFBQSxFQUN0QyxpQkFBaUI7QUFBQSxFQUNqQixPQUFPO0FBQUEsRUFDUCxTQUFTO0FBQUEsRUFDVCxZQUFZO0FBQUEsRUFDWixhQUFhO0FBQUEsRUFDYixlQUFlO0FBQUEsSUFDYixLQUFLLENBQUMsWUFBWTtBQUFBLEVBQ3BCO0FBQ0Y7QUFFTyxJQUFNLGdCQUF1QztBQUFBLEVBQ2xELFlBQVksQ0FBQyxXQUFXLGFBQWE7QUFBQSxFQUNyQyxPQUFPO0FBQUEsSUFDTCxnQkFBZ0IsS0FBSyxRQUFRLEtBQUssdUNBQXVDO0FBQUEsSUFDekUsa0JBQWtCLEtBQUssUUFBUSxLQUFLLHlDQUF5QztBQUFBLElBQzdFLFlBQVksS0FBSyxRQUFRLEtBQUssbUNBQW1DO0FBQUEsRUFDbkU7QUFDRjtBQUVPLElBQU0sbUJBQW1CLENBQUMsVUFDL0IsYUFBYSxNQUFNO0FBQ2pCLFFBQU0sU0FBcUI7QUFBQSxJQUN6QixTQUFTLENBQUMsTUFBTSxDQUFDO0FBQUEsSUFDakIsTUFBTTtBQUFBLElBQ04sU0FBUztBQUFBLEVBQ1g7QUFDQSxpQ0FBUTtBQUNSLFNBQU87QUFDVCxDQUFDOzs7QUNsQ0gsSUFBTyxzQkFBUSxpQkFBaUIsT0FBSztBQUVuQyxJQUFFLEtBQU0sYUFBYTtBQUN2QixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
